package com.java8;

import java.util.function.BiFunction;

class Calservices{
	public static int add(int a,int b) {
		return (a+b);
	}
}

class ChildClass extends Thread{
	public static void simple() {
		System.out.println("I am child class run override by lambda in runnable");
	}
	public static void simple1() {
		System.out.println("I am child class run override by lambda in runnable");
	}
}


public class MethodAndConstructorExample {

	public static void main(String[] args) {
		
		BiFunction<Integer, Integer, Integer> adder = (a,b) -> {return (a+b);}; // override method using lambda
		System.out.println(adder.apply(10, 20));
		
		// use method refrence
		BiFunction<Integer, Integer, Integer> adder1 = Calservices::add;
		System.out.println(adder1.apply(30, 20));
		
		// understand by thread example
		Runnable r1 = () -> {
			System.out.println("I am child class run override by lambda in runnable simple");
		};
		Thread f1 = new Thread(r1);
		f1.start();
		
		// use method ref for above thread with static
		Runnable r = ChildClass::simple; // run method refer to simple method
		Thread f = new Thread(r);
		f.start();
		
		// use method ref for above thread with non static
		
	}

}
