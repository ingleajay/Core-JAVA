package com.java8;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

public class PredicatePredefineFunction {

	public static void main(String[] args) {
		
		// check number is even or not ? // test() 
		Predicate<Integer> g = p->p%2==0;
		System.out.println("Check even or not  ? " + g.test(21));
		
		// chech even or odd value
		ArrayList<Integer> a = new ArrayList<Integer>();
		a.add(20);
		a.add(30);
		a.add(100);
		a.add(45);
		System.out.println("Elements in array : " + a);
		
		// without predicate
		for(int i = 0 ; i<a.size();i++) {
			if(a.get(i) % 2 == 0) {
				System.out.println("Even Number  : " + a.get(i));
			}
			else {
				System.out.println("Odd Number : " + a.get(i));
			}
		}
		
		// predicate + lambda exp
		System.out.println("It checking every number : ");
		for(int i = 0 ; i<a.size();i++) {
			if(g.test(a.get(i)))
				System.out.println("Even Number : " + a.get(i));
			else
				System.out.println("Odd Number : " + a.get(i));
		};
		
		// use negate() - returns the logical negation of existing predicate.
		boolean odd = g.negate().test(21);
		System.out.println("Check odd or not  ? "  + odd);
		
		// use and() and or()
		
		Predicate<Integer> t = y -> y%2==0;
		Predicate<Integer> m = n -> n>50;
		for(Integer i : a) {
			// Check both condition 
			if(m.and(t).test(i))
			 System.out.println("And : " + i);
			
			// check one of the condition
			if(m.or(t).test(i))
				 System.out.println("Or : " + i);
		};
		
		// predicate pass in function
		// test string length greater 5
		List<String> d = Arrays.asList("Ajay","Vijay","Tea","Manaohar");
		System.out.println(d);
		for(String j : d) {
			Testlength(d, (r) -> j.length()>=5);
		}
	}

	private static void Testlength(List<String> d,Predicate<List<String>> p) {
		d.forEach((i)->System.out.println("String  : " + d.get(i) + p.test(d)));
		
	}

	
	
}
