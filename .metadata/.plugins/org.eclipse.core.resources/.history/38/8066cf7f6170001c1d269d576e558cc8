package com.multitasking;


class Producer implements Runnable {

    private final Vector sharedQueue;
    private final int SIZE;

    public Producer(Vector sharedQueue, int size) {
        this.sharedQueue = sharedQueue;
        this.SIZE = size;
    }

    @Override
    public void run() {
        for (int i = 0; i < 7; i++) {
            System.out.println("Produced: " + i);
            try {
                produce(i);
            } catch (InterruptedException ex) {
                Logger.getLogger(Producer.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private void produce(int i) throws InterruptedException {

        //wait if the queue is full
        while (sharedQueue.size() == SIZE) {
            synchronized (sharedQueue) {
                System.out.println("The queue is full " + Thread.currentThread().getName()
                                    + " is waiting , size: " + sharedQueue.size());

                sharedQueue.wait();
            }
        }

        //producing element and notify consumers
        synchronized (sharedQueue) {
            sharedQueue.add(i);
            sharedQueue.notifyAll();
        }
    }
}


Read more: https://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html#ixzz7HMsfEjE4



public class ProducerConsumer {

	public static void main(String[] args) {
		System.out.println("Enter no of element in bucket :");
		Scanner sc = new Scanner(System.in);
		int size = sc.nextInt();
		int[] bucket = new int[size];
		Producer p = new Producer(bucket,size,"Producer");
		Consumer c = new Consumer(bucket,size,"Consumer");
		p.start();
		c.start();
	}
}
